'use client';

import React, { useState, useEffect } from 'react';
import { Table, Card, Button, Tag, Space, Modal, Form, Input, message, Spin, Select } from 'antd';
import { EyeOutlined, CheckOutlined, CloseOutlined, EditOutlined } from '@ant-design/icons';
import { useAuth } from '../contexts/AuthContext';
import { ApplicationStatus, UserRole } from '../types';

const { TextArea } = Input;
const { Option } = Select;

interface Application {
    _id: string;
    student_name: string;
    student_email: string;
    student_code?: string;
    unit_name: string;
    position_title?: string;
    description?: string;
    status: ApplicationStatus;
    created_at: string;
    l1_review_notes?: string;
    l2_review_notes?: string;
    supervisor_notes?: string;
}

const PendingReviews: React.FC = () => {
    const { user } = useAuth();
    const [applications, setApplications] = useState<Application[]>([]);
    const [loading, setLoading] = useState(true);
    const [reviewModalVisible, setReviewModalVisible] = useState(false);
    const [selectedApplication, setSelectedApplication] = useState<Application | null>(null);
    const [reviewForm] = Form.useForm();

    useEffect(() => {
        fetchPendingApplications();
    }, []);

    const fetchPendingApplications = async () => {
        try {
            setLoading(true);
            const token = localStorage.getItem('token');

            const response = await fetch('/api/applications/pending', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    setApplications(data.data || []);
                }
            } else {
                message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n ch·ªù duy·ªát');
            }
        } catch (error) {
            console.error('Error fetching pending applications:', error);
            message.error('L·ªói khi t·∫£i danh s√°ch ƒë∆°n ch·ªù duy·ªát');
        } finally {
            setLoading(false);
        }
    };

    const getStatusColor = (status: ApplicationStatus) => {
        switch (status) {
            case 'SUBMITTED': return 'gold';
            case 'APPROVED_L1': return 'cyan';
            case 'APPROVED_L2': return 'lime';
            case 'APPROVED_FINAL': return 'green';
            case 'REJECTED_L1':
            case 'REJECTED_L2': return 'red';
            case 'REVISION_REQUESTED_L1':
            case 'REVISION_REQUESTED_L2': return 'orange';
            default: return 'default';
        }
    };

    const getStatusText = (status: ApplicationStatus) => {
        switch (status) {
            case 'SUBMITTED': return 'ƒê√£ n·ªôp';
            case 'APPROVED_L1': return 'Duy·ªát L1';
            case 'APPROVED_L2': return 'Duy·ªát L2';
            case 'APPROVED_FINAL': return 'ƒê√£ duy·ªát';
            case 'REJECTED_L1': return 'T·ª´ ch·ªëi L1';
            case 'REJECTED_L2': return 'T·ª´ ch·ªëi L2';
            case 'REVISION_REQUESTED_L1': return 'Y√™u c·∫ßu s·ª≠a L1';
            case 'REVISION_REQUESTED_L2': return 'Y√™u c·∫ßu s·ª≠a L2';
            default: return status;
        }
    };

    const openReviewModal = (application: Application) => {
        setSelectedApplication(application);
        setReviewModalVisible(true);
        reviewForm.resetFields();
    };

    const handleReview = async (values: any) => {
        if (!selectedApplication) return;

        const actionText = values.action === 'approve' ? 'duy·ªát' :
            values.action === 'reject' ? 't·ª´ ch·ªëi' :
                'y√™u c·∫ßu ch·ªânh s·ª≠a';

        const loadingMessage = message.loading({
            content: `‚è≥ ƒêang ${actionText} ƒë∆°n ·ª©ng tuy·ªÉn...`,
            duration: 0
        });

        try {
            const token = localStorage.getItem('token');

            const response = await fetch(`/api/applications/${selectedApplication._id}/review`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    action: values.action,
                    notes: values.notes
                })
            });

            loadingMessage();

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    const successIcon = values.action === 'approve' ? '‚úÖ' :
                        values.action === 'reject' ? '‚ùå' : 'üìù';

                    message.success({
                        content: (
                            <div>
                                <div style={{ fontWeight: 'bold', marginBottom: 4 }}>
                                    {successIcon} ƒê√£ {actionText} ƒë∆°n th√†nh c√¥ng!
                                </div>
                                <div style={{ fontSize: '12px', color: '#666' }}>
                                    Sinh vi√™n: {selectedApplication.student_name}
                                    <br />
                                    V·ªã tr√≠: {selectedApplication.position_title}
                                    {values.notes && (
                                        <>
                                            <br />
                                            Ghi ch√∫: {values.notes.length > 30 ? values.notes.substring(0, 30) + '...' : values.notes}
                                        </>
                                    )}
                                </div>
                            </div>
                        ),
                        duration: 4
                    });
                    setReviewModalVisible(false);
                    fetchPendingApplications();
                } else {
                    message.error({
                        content: (
                            <div>
                                <div style={{ fontWeight: 'bold', marginBottom: 4 }}>
                                    ‚ùå L·ªói khi {actionText} ƒë∆°n ·ª©ng tuy·ªÉn
                                </div>
                                <div style={{ fontSize: '12px', color: '#666' }}>
                                    {data.message || 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω'}
                                </div>
                            </div>
                        ),
                        duration: 5
                    });
                }
            } else {
                message.error({
                    content: (
                        <div>
                            <div style={{ fontWeight: 'bold', marginBottom: 4 }}>
                                ‚ùå L·ªói khi {actionText} ƒë∆°n ·ª©ng tuy·ªÉn
                            </div>
                            <div style={{ fontSize: '12px', color: '#666' }}>
                                M√°y ch·ªß tr·∫£ v·ªÅ l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.
                            </div>
                        </div>
                    ),
                    duration: 5
                });
            }
        } catch (error) {
            loadingMessage();
            console.error('Error reviewing application:', error);
            message.error({
                content: (
                    <div>
                        <div style={{ fontWeight: 'bold', marginBottom: 4 }}>
                            üîå L·ªói k·∫øt n·ªëi
                        </div>
                        <div style={{ fontSize: '12px', color: '#666' }}>
                            Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.
                        </div>
                    </div>
                ),
                duration: 5
            });
        }
    };

    const viewApplicationDetail = (application: Application) => {
        Modal.info({
            title: `Chi ti·∫øt ƒë∆°n ƒëƒÉng k√Ω: ${application.student_name}`,
            width: 700,
            content: (
                <div style={{ marginTop: 16 }}>
                    <div style={{ marginBottom: 16 }}>
                        <h4>Th√¥ng tin sinh vi√™n:</h4>
                        <p><strong>H·ªç t√™n:</strong> {application.student_name}</p>
                        <p><strong>Email:</strong> {application.student_email}</p>
                        <p><strong>M√£ sinh vi√™n:</strong> {application.student_code}</p>
                    </div>

                    <div style={{ marginBottom: 16 }}>
                        <h4>Th√¥ng tin th·ª±c t·∫≠p:</h4>
                        <p><strong>ƒê∆°n v·ªã:</strong> {application.unit_name}</p>
                        <p><strong>V·ªã tr√≠:</strong> {application.position_title}</p>
                        <p><strong>M√¥ t·∫£:</strong> {application.description}</p>
                    </div>

                    <div style={{ marginBottom: 16 }}>
                        <h4>Tr·∫°ng th√°i:</h4>
                        <Tag color={getStatusColor(application.status)}>
                            {getStatusText(application.status)}
                        </Tag>
                    </div>

                    {application.l1_review_notes && (
                        <div style={{ marginBottom: 16 }}>
                            <h4>Ghi ch√∫ L1:</h4>
                            <p>{application.l1_review_notes}</p>
                        </div>
                    )}

                    {application.l2_review_notes && (
                        <div style={{ marginBottom: 16 }}>
                            <h4>Ghi ch√∫ L2:</h4>
                            <p>{application.l2_review_notes}</p>
                        </div>
                    )}

                    {application.supervisor_notes && (
                        <div style={{ marginBottom: 16 }}>
                            <h4>Ghi ch√∫ gi√°m s√°t:</h4>
                            <p>{application.supervisor_notes}</p>
                        </div>
                    )}

                    <div>
                        <h4>Ng√†y n·ªôp:</h4>
                        <p>{new Date(application.created_at).toLocaleString('vi-VN')}</p>
                    </div>
                </div>
            ),
        });
    };

    const getAvailableActions = () => {
        if (user?.role === UserRole.L1) {
            return [
                { value: 'approve_l1', label: 'Duy·ªát (L1)' },
                { value: 'reject_l1', label: 'T·ª´ ch·ªëi (L1)' },
                { value: 'request_revision_l1', label: 'Y√™u c·∫ßu s·ª≠a ƒë·ªïi (L1)' }
            ];
        }

        if (user?.role === UserRole.L2) {
            return [
                { value: 'approve_l2', label: 'Duy·ªát (L2)' },
                { value: 'reject_l2', label: 'T·ª´ ch·ªëi (L2)' },
                { value: 'request_revision_l2', label: 'Y√™u c·∫ßu s·ª≠a ƒë·ªïi (L2)' }
            ];
        }

        if (user?.role === UserRole.SUPERVISOR) {
            return [
                { value: 'approve_final', label: 'Duy·ªát cu·ªëi c√πng' },
                { value: 'reject_final', label: 'T·ª´ ch·ªëi cu·ªëi c√πng' }
            ];
        }

        return [];
    };

    const columns = [
        {
            title: 'Sinh vi√™n',
            key: 'student',
            render: (record: Application) => (
                <div>
                    <div style={{ fontWeight: 'bold' }}>{record.student_name}</div>
                    <div style={{ fontSize: '12px', color: '#666' }}>{record.student_code}</div>
                    <div style={{ fontSize: '12px', color: '#666' }}>{record.student_email}</div>
                </div>
            ),
        },
        {
            title: 'ƒê∆°n v·ªã th·ª±c t·∫≠p',
            dataIndex: 'unit_name',
            key: 'unit_name',
        },
        {
            title: 'V·ªã tr√≠',
            dataIndex: 'position_title',
            key: 'position_title',
        },
        {
            title: 'Tr·∫°ng th√°i',
            key: 'status',
            render: (record: Application) => (
                <Tag color={getStatusColor(record.status)}>
                    {getStatusText(record.status)}
                </Tag>
            ),
        },
        {
            title: 'Ng√†y n·ªôp',
            key: 'created_at',
            render: (record: Application) => (
                new Date(record.created_at).toLocaleDateString('vi-VN')
            ),
        },
        {
            title: 'Thao t√°c',
            key: 'actions',
            render: (record: Application) => (
                <Space size="middle">
                    <Button
                        type="primary"
                        icon={<EyeOutlined />}
                        size="small"
                        onClick={() => viewApplicationDetail(record)}
                    >
                        Chi ti·∫øt
                    </Button>
                    <Button
                        type="default"
                        icon={<EditOutlined />}
                        size="small"
                        onClick={() => openReviewModal(record)}
                    >
                        Duy·ªát
                    </Button>
                </Space>
            ),
        },
    ];

    return (
        <Card title="ƒê∆°n ƒëƒÉng k√Ω ch·ªù duy·ªát" style={{ margin: '0 auto' }}>
            <div style={{ marginBottom: 16 }}>
                <Button onClick={fetchPendingApplications}>
                    L√†m m·ªõi
                </Button>
            </div>

            <Table
                columns={columns}
                dataSource={applications}
                rowKey="_id"
                loading={loading}
                pagination={{
                    showSizeChanger: true,
                    showQuickJumper: true,
                    showTotal: (total, range) => `${range[0]}-${range[1]} c·ªßa ${total} ƒë∆°n`,
                }}
                scroll={{ x: 1000 }}
            />

            <Modal
                title={`Duy·ªát ƒë∆°n: ${selectedApplication?.student_name}`}
                open={reviewModalVisible}
                onCancel={() => setReviewModalVisible(false)}
                footer={null}
                width={600}
            >
                <Form
                    form={reviewForm}
                    layout="vertical"
                    onFinish={handleReview}
                >
                    <Form.Item
                        label="H√†nh ƒë·ªông"
                        name="action"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h√†nh ƒë·ªông' }]}
                    >
                        <Select placeholder="Ch·ªçn h√†nh ƒë·ªông">
                            {getAvailableActions().map(action => (
                                <Option key={action.value} value={action.value}>
                                    {action.label}
                                </Option>
                            ))}
                        </Select>
                    </Form.Item>

                    <Form.Item
                        label="Ghi ch√∫"
                        name="notes"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ghi ch√∫' }]}
                    >
                        <TextArea
                            rows={4}
                            placeholder="Nh·∫≠p ghi ch√∫ v·ªÅ quy·∫øt ƒë·ªãnh duy·ªát..."
                        />
                    </Form.Item>

                    <Form.Item>
                        <Space>
                            <Button type="primary" htmlType="submit">
                                X√°c nh·∫≠n
                            </Button>
                            <Button onClick={() => setReviewModalVisible(false)}>
                                H·ªßy
                            </Button>
                        </Space>
                    </Form.Item>
                </Form>
            </Modal>
        </Card>
    );
};

export default PendingReviews;
